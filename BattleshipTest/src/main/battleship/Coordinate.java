/**
 * Created by Ben on 1/7/16.
 * <p>
 * Represents a location on a Battleship board, such as "B4" or "I8"
 * Internally stores the row as a number but can use letters and numbers interchangeably.
 */

package battleship;

public class Coordinate {

    private int mRow;
    private int mCol;

    /**
     * Coordinate defaults to "A1"
     */
    public Coordinate() {

    }

    /**
     * Constructs a new Coordinate from a human-readable string representation (for example "B4" or "I8").
     *
     * @param strRep the string representation of the Coordinate. Must be 2 characters long, with the first
     *               character being the row <i>as a letter</i>, and the second being the column <i>as a number</i>.
     */
    public Coordinate(String strRep) {

    }

    /**
     * Constructs a new Coordinate from a row (as a letter) and a column (as a number).
     * @param rowLetter the Coordinate's row (as a letter)
     * @param colNumber the Coordinate's column (as a number)
     */
    public Coordinate(char rowLetter, int colNumber) {

    }

    /**
     * Constructs a new Coordinate from a row and column (as numbers).
     * @param rowNumber the Coordinate's row (as a number)
     * @param colNumber the Coordinate's column (as a number)
     */
    public Coordinate(int rowNumber, int colNumber) {

    }

    /**
     * Converts a row number to the letter of that row. 1 maps to 'A', 2 maps to 'B', etc.
     * @param num a positive integer that represents the row number
     * @return the row letter that corresponds to {@code num}.
     */
    public char numToLetter(int num) {
        return '?';
    }

    /**
     * Converts a row letter to the number of that row. 'A' maps to 1, 'B' maps to 2, etc.
     * @param letter an uppercase character that represents the row letter
     * @return the row number represented by {@code letter}.
     */
    public int letterToNum(char letter) {
        return 0;
    }

    public int getRow() {
        return 0;
    }

    public char getRowLetter() {
        return '?';
    }

    public int getCol() {
        return 0;
    }

    @Override
    public String toString() {
        String ret = "";
        ret += getRowLetter();
        ret += getCol();
        return ret;
    }

    // Auto-generated by IntelliJ
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Coordinate that = (Coordinate) o;

        return mRow == that.mRow && mCol == that.mCol;
    }

    // Auto-generated by IntelliJ
    @Override
    public int hashCode() {
        int result = mRow;
        result = 31 * result + mCol;
        return result;
    }
}
