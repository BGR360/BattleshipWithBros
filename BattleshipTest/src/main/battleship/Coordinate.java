/**
 * Created by Ben on 1/7/16.
 * <p>
 * Represents a location on a Battleship board, such as "B4" or "I8"
 * Internally stores the row as a number but can use letters and numbers interchangeably.
 */

package battleship;

public class Coordinate {

    private int mRow;
    private int mCol;

    /**
     * Constructs a new {@code Coordinate} from a human-readable string representation (for example "B4" or "I8").
     * Must be 2 characters long, with the first character being the row <i>as a letter</i> between 'A' and 'Z',
     * and the second being the column <i>as a number</i> greater than or equal to 1.
     *
     * @param strRep a valid string representation of the {@code Coordinate}.
     * @throws IllegalArgumentException If {@code strRep} does not follow the rules listed above
     */
    public Coordinate(String strRep) throws IllegalArgumentException {

    }

    /**
     * Constructs a new {@code Coordinate} from a row (as a letter) and a column (as a number).
     * Row must be between 'A' and 'Z', and column must be greater than or equal to 1.
     *
     * @param rowLetter the Coordinate's row (as a letter)
     * @param colNumber the Coordinate's column (as a number)
     * @throws IllegalArgumentException If {@code rowLetter} is not between 'A' and 'Z', or if
     * {@code colNumber} is less than 1
     */
    public Coordinate(char rowLetter, int colNumber) throws IllegalArgumentException {

    }

    /**
     * Constructs a new {@code Coordinate} from a row and column (as numbers).
     * Row must be between 1 and 26, and column must be greater than or equal to 1.
     *
     * @param rowNumber the {@code Coordinate}'s row (as a number)
     * @param colNumber the {@code Coordinate}'s column (as a number)
     * @throws IllegalArgumentException If {@code rowNumber} is not between 1 and 26, or if
     * {@code colNumber} is less than 1
     */
    public Coordinate(int rowNumber, int colNumber) {

    }

    /**
     * Converts a row number to the letter of that row. 1 maps to 'A', 2 maps to 'B', etc.
     * If num is not between 1 and 26, returns 0.
     *
     * @param num an integer between 1 and 26 that represents the row number
     * @return If {@code num} is between 1 and 26, then returns the row letter that corresponds to {@code num}.
     * Else returns 0.
     */
    public static char numToLetter(int num) {
        return 0;
    }

    /**
     * Converts a row letter to the number of that row. 'A' maps to 1, 'B' maps to 2, etc.
     * If letter is not between 'A' and 'Z', returns -1.
     *
     * @param letter an uppercase character that represents the row letter
     * @return If {@code letter} is between 'A' and 'Z', returns the row number represented by {@code letter}.
     * Else returns -1.
     */
    public static int letterToNum(char letter) {
        return 0;
    }

    public int getRow() {
        return 0;
    }

    public char getRowLetter() {
        return 0;
    }

    public int getCol() {
        return 0;
    }

    @Override
    public String toString() {
        String ret = "";
        ret += getRowLetter();
        ret += getCol();
        return ret;
    }

    // Auto-generated by IntelliJ
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Coordinate that = (Coordinate) o;

        return mRow == that.mRow && mCol == that.mCol;
    }

    // Auto-generated by IntelliJ
    @Override
    public int hashCode() {
        int result = mRow;
        result = 31 * result + mCol;
        return result;
    }
}
